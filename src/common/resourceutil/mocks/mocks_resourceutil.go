// Code generated by MockGen. DO NOT EDIT.
// Source: resourceutil.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCommand is a mock of Command interface
type MockCommand struct {
	ctrl     *gomock.Controller
	recorder *MockCommandMockRecorder
}

// MockCommandMockRecorder is the mock recorder for MockCommand
type MockCommandMockRecorder struct {
	mock *MockCommand
}

// NewMockCommand creates a new mock instance
func NewMockCommand(ctrl *gomock.Controller) *MockCommand {
	mock := &MockCommand{ctrl: ctrl}
	mock.recorder = &MockCommandMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCommand) EXPECT() *MockCommandMockRecorder {
	return m.recorder
}

// Run mocks base method
func (m *MockCommand) Run(arg0 string) float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(float64)
	return ret0
}

// Run indicates an expected call of Run
func (mr *MockCommandMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockCommand)(nil).Run), arg0)
}

// Close mocks base method
func (m *MockCommand) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockCommandMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCommand)(nil).Close))
}

// MockGetResource is a mock of GetResource interface
type MockGetResource struct {
	ctrl     *gomock.Controller
	recorder *MockGetResourceMockRecorder
}

// MockGetResourceMockRecorder is the mock recorder for MockGetResource
type MockGetResourceMockRecorder struct {
	mock *MockGetResource
}

// NewMockGetResource creates a new mock instance
func NewMockGetResource(ctrl *gomock.Controller) *MockGetResource {
	mock := &MockGetResource{ctrl: ctrl}
	mock.recorder = &MockGetResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGetResource) EXPECT() *MockGetResourceMockRecorder {
	return m.recorder
}

// GetResource mocks base method
func (m *MockGetResource) GetResource(arg0 string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource
func (mr *MockGetResourceMockRecorder) GetResource(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockGetResource)(nil).GetResource), arg0)
}

// SetDeviceID mocks base method
func (m *MockGetResource) SetDeviceID(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeviceID", arg0)
}

// SetDeviceID indicates an expected call of SetDeviceID
func (mr *MockGetResourceMockRecorder) SetDeviceID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeviceID", reflect.TypeOf((*MockGetResource)(nil).SetDeviceID), arg0)
}
