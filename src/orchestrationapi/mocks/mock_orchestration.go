// Code generated by MockGen. DO NOT EDIT.
// Source: orchestration.go

// Package mock_orchestrationapi is a generated GoMock package.
package mocks

import (
	configuremgrtypes "common/types/configuremgrtypes"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOrche is a mock of Orche interface
type MockOrche struct {
	ctrl     *gomock.Controller
	recorder *MockOrcheMockRecorder
}

// MockOrcheMockRecorder is the mock recorder for MockOrche
type MockOrcheMockRecorder struct {
	mock *MockOrche
}

// NewMockOrche creates a new mock instance
func NewMockOrche(ctrl *gomock.Controller) *MockOrche {
	mock := &MockOrche{ctrl: ctrl}
	mock.recorder = &MockOrcheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrche) EXPECT() *MockOrcheMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockOrche) Start(deviceIDPath, platform, executionType string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start", deviceIDPath, platform, executionType)
}

// Start indicates an expected call of Start
func (mr *MockOrcheMockRecorder) Start(deviceIDPath, platform, executionType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockOrche)(nil).Start), deviceIDPath, platform, executionType)
}

// MockOrcheExternalApi is a mock of OrcheExternalAPI interface
type MockOrcheExternalApi struct {
	ctrl     *gomock.Controller
	recorder *MockOrcheExternalApiMockRecorder
}

// MockOrcheExternalApiMockRecorder is the mock recorder for MockOrcheExternalApi
type MockOrcheExternalApiMockRecorder struct {
	mock *MockOrcheExternalApi
}

// NewMockOrcheExternalApi creates a new mock instance
func NewMockOrcheExternalApi(ctrl *gomock.Controller) *MockOrcheExternalApi {
	mock := &MockOrcheExternalApi{ctrl: ctrl}
	mock.recorder = &MockOrcheExternalApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrcheExternalApi) EXPECT() *MockOrcheExternalApiMockRecorder {
	return m.recorder
}

// RequestService mocks base method
func (m *MockOrcheExternalApi) RequestService(appName string, args []string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestService", appName, args)
	ret0, _ := ret[0].(int)
	return ret0
}

// RequestService indicates an expected call of RequestService
func (mr *MockOrcheExternalApiMockRecorder) RequestService(appName, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestService", reflect.TypeOf((*MockOrcheExternalApi)(nil).RequestService), appName, args)
}

// MockOrcheInternalApi is a mock of OrcheInternalAPI interface
type MockOrcheInternalApi struct {
	ctrl     *gomock.Controller
	recorder *MockOrcheInternalApiMockRecorder
}

// MockOrcheInternalApiMockRecorder is the mock recorder for MockOrcheInternalApi
type MockOrcheInternalApiMockRecorder struct {
	mock *MockOrcheInternalApi
}

// NewMockOrcheInternalApi creates a new mock instance
func NewMockOrcheInternalApi(ctrl *gomock.Controller) *MockOrcheInternalApi {
	mock := &MockOrcheInternalApi{ctrl: ctrl}
	mock.recorder = &MockOrcheInternalApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOrcheInternalApi) EXPECT() *MockOrcheInternalApiMockRecorder {
	return m.recorder
}

// Notify mocks base method
func (m *MockOrcheInternalApi) Notify(arg0 configuremgrtypes.ServiceInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Notify", arg0)
}

// Notify indicates an expected call of Notify
func (mr *MockOrcheInternalApiMockRecorder) Notify(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockOrcheInternalApi)(nil).Notify), arg0)
}

// ExecuteAppOnLocal mocks base method
func (m *MockOrcheInternalApi) ExecuteAppOnLocal(appInfo map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExecuteAppOnLocal", appInfo)
}

// ExecuteAppOnLocal indicates an expected call of ExecuteAppOnLocal
func (mr *MockOrcheInternalApiMockRecorder) ExecuteAppOnLocal(appInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAppOnLocal", reflect.TypeOf((*MockOrcheInternalApi)(nil).ExecuteAppOnLocal), appInfo)
}

// HandleNotificationOnLocal mocks base method
func (m *MockOrcheInternalApi) HandleNotificationOnLocal(serviceID float64, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleNotificationOnLocal", serviceID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleNotificationOnLocal indicates an expected call of HandleNotificationOnLocal
func (mr *MockOrcheInternalApiMockRecorder) HandleNotificationOnLocal(serviceID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleNotificationOnLocal", reflect.TypeOf((*MockOrcheInternalApi)(nil).HandleNotificationOnLocal), serviceID, status)
}

// GetScore mocks base method
func (m *MockOrcheInternalApi) GetScore(target, name string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScore", target, name)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScore indicates an expected call of GetScore
func (mr *MockOrcheInternalApiMockRecorder) GetScore(target, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScore", reflect.TypeOf((*MockOrcheInternalApi)(nil).GetScore), target, name)
}
